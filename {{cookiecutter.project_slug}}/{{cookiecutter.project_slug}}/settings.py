"""
Django settings for {{cookiecutter.project_slug}} project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os

import environ
from django.urls import reverse_lazy

# Django environ
root = environ.Path(__file__) - 2
env = environ.Env(
    DEBUG=(bool, False),
    SECRET_KEY=(str, 'y_k@i*i(a0%gh+g%gos&&0)0#b-pbb&atrwl!x+40t!l(i1ap%'),
    REDIS_URL=(str, 'redis://localhost:6379/10'),
    CACHE_URL=(str, 'redis://localhost:6379/10'),
    EMAIL_FROM=(str, 'chatbot@spasibosb.ru'),
    DEVINO_USERNAME=(str, 'spasibo_test'),
    DEVINO_PASSWORD=(str, 'Spasibo_test1qwerty')
)
environ.Env.read_env(env_file=root('.env'))

# Build paths inside the project like this: root('dir/subdir')
BASE_DIR = root()

SITE_ID = 1


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.contenttypes',
    {% if cookiecutter.use_authentication == 'y' or cookiecutter.use_registration == 'y' -%}
    'django.contrib.auth',
    {% endif -%}
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    {% if cookiecutter.use_postgres == 'y' -%}
    'django.contrib.postgres',
    {% endif -%}
    'django.contrib.sites',

    {% if cookiecutter.use_django_rest_framework == 'y' -%}
    'apps.api',
    {% endif -%}
    'apps.index',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    {% if cookiecutter.use_authentication -%}
    'django.contrib.sessions.middleware.SessionMiddleware',
    {% endif -%}
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    {% if cookiecutter.use_authentication -%}
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    {% endif -%}
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{cookiecutter.project_slug}}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            root.path('templates')
        ],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ],
            'builtins': [
                'django.templatetags.i18n'
            ],
        },
    },
]

WSGI_APPLICATION = '{{cookiecutter.project_slug}}.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

if os.environ.get('DATABASE_URL'):
    import dj_database_url  # noqa
    DATABASES = {
        'default': dj_database_url.config()
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

{% if cookiecutter.use_authentication == 'y' -%}
# Athentication system
# https://docs.djangoproject.com/en/1.11/topics/auth/default/

LOGIN_REDIRECT_URL = reverse_lazy('index')
LOGIN_URL = reverse_lazy('login')
{% endif -%}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_I18N = True
USE_L10N = True
USE_TZ = True

TIME_ZONE = '{{ cookiecutter.timezone }}'

# Admins and managers
# https://docs.djangoproject.com/en/1.11/ref/settings/#admins

ADMINS = MANAGERS = (
    ('{{cookiecutter.author_name}}', '{{cookiecutter.email}}'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = 'assets'
STATIC_URL = '/static/'

STATICFILES_DIRS = (root('static'),)

# Fixtures
# https://docs.djangoproject.com/en/1.10/howto/initial-data/

FIXTURE_DIRS = (root('fixtures'),)
